# 인프콘 2023

## 나 홀로 시골 개발자의 성장 전략 - 사수 없는 사막, 나눔으로 살아남기
- 토이 프로젝트의 목표 : 실사용
  - 다양한 기술과 스택 접목해보기
  - 배운 것을 실무에 활용하기
- 지속 공유를 통한 성장 = 유튜브 컨텐츠, 강의 제작, 책 집필

## (레거시 시스템) 개편의 기술 - 배달 플랫폼에서 겪은 N번의 개편 경험기, 권용근
- 제 1장 의존성을 한 방향으로 정리하라
  - 스파게티 코드로 사이드 이펙트 발생 가능성이 높음
- 제 2장 변경 대상에 대한 경계를 나눈다
  - 책임과 역할이 제각각 / 계층과 책임을 나눈다
- 제 3장 테스트를 확보한다
  - 상위 계층까지 테스트를 작성하는게 좋다.
  - 시간이 없을때는 응답을 비교하기도 했음, 부하테스트 통해 성능 비교도 진행 (자동화)
  - 변경해도 괜찮다는 안정감
- 제 4장 프로젝트 가시성 확보
  - 일정에 대한 리스크를 관리해야함
  - 이해관계자가 일정을 보고 프로젝트를 도와주기 좋음
- 부록 1. 도메인 이해 공유
  - 이벤트스토밍 : https://www.youtube.com/watch?v=hUcpv5fdCIk
  - 옆이 더 좋음 : https://www.youtube.com/watch?v=gihxS6eE1DM
- 부록 2. 변화를 측정한다.
  - 개편 후, 측정을 통해 구성원과 공유하면 동기부여가 될 수 있다.


### 이벤트 스토밍
> https://www.youtube.com/watch?v=hUcpv5fdCIk

- 바운디드 컨텍스트 : 같은 언어라도 의미가 다르고 같은 대상이라도 지칭하는 용어가 다를 수 있다.
  - 명백한 언어 불일치는 종종 동일한 프로세스 내에서 여러 개의 바운디드 컨텍스트를 나타내는 지표이다.

- 애그리게잇 또는 비즈니스 규칙 : 시스템이 기대하는 책임을 수행하며 일관성을 유지하는 단위
  - 일관성은 항상 참이어야 하는 속성을 유지함으로써 달성된다.

### 멀티 모듈 프로젝트 구조와 설계
- 멀티 모듈 프로젝트 아키텍처는 나중에 변경하기 어렵다 / 리스크를 줄이기 위한 시작
- 공통적인 모듈의 기능이 커진다.
  - 중복을 제거하기 위해 공통 모듈에 많은 코드를 작성하게 된다.
- 문제 1) 공통 모듈에 RDB 도메인을 넣을 경우, Too Many connection 문제 발생
  - 해당 의존성을 사용하는 프로젝트는 모두 커넥션 풀을 할당받음
- 문제 2) "NoClassDefFoundError", 특정한 모듈이 하위 버전 라이브러리를 참조하는 경우 업그레이드 난해함
- 문제 3) "Copy & Paste" 참조하는 곳이 너무 많아 일단 if.. else 분기 처리 copy & paste

- 무엇은 기준으로 멀티 모듈 프로젝트 구조를 나뉘어야할까?
  1. 코드 중복을 허용하고, core, common 모듈은 삭제한다.
  2. DDD, 바운디드 컨텍스트를 기준으로 나뉘는게 좋음
    - 서버 모듈 (boot server) (batch, admin, api)
    - 데이터 모듈 (data) ( meta, user, chart)
    - 연동 모듈 (infra) ( and, vod, photo, billing)
    - 클라우드 (시스템) 모듈 (cloud) [ 변화 적음 ] (config, gateway, discovery )

 - 