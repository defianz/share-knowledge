
# 인프랩의 도전 : 글로벌 교육 플랫폼으로의 첫 발걸음
- 글로벌 플랫폼으로 나아가기 위한 인프런의 방향성
- AI 활용을 통한 자막, 음성 제공 등 벌써 AI를 서비스에 접목시키려는 노력이 신기했음

# 실리콘밸리 개발 문화 및 서바이벌 전략 - 이승준
- 국내 IT 기업의 몇몇 문화, 복지 (프로젝트 끝난 후, 휴가, 가족돌봄 휴가 등)가 실리콘밸리 스타트업, 대기업에서 나온거같다.

# 경력이 늘수록 CS 이론이 중요해지는 이유 - 최호성
- CS 이론에 대해 다시 한번 학습해보면 좋을 것 같다는 생각이 들었다.

# [강추] 객체지향은 여전히 유효한가? - 조영호
- 객체지향이 만능이 아니다.
- 때로는 절차지향이 더 좋을수도 있다.
- 코드의 목적과 변경의 방향성에 따라 언제 어떤 기술을 사용할지 결정하세요

# 지속 성장 가능한 설계를 만들어가는 방법 - 김재민
- 설계를 가장 잘하는 법은 설계를 하지 않는 법
- 개념을 잡고 격별의 세워, 구현의 채워나가 설계를 완성한다.
- 개발을 혼자하면 괜찮을지 모르지만, 여러명이 하는상황에서 설계서는 반드시 필요하지 않을까?

# [추천] 인프런 아키텍처 2024 ~ 2025 - 이동욱
- 구조 및 기능을 변경하여 큰 효율화를 이뤄낸 사례를 공유함
- 비용 관점에서의 효율화를 위해 썸네일 인코딩 변경이나 메뉴 캐싱을 활용한게 재밌었다.
- 리팩토링이나 구조 변경과 신기능 개발 사이에서 많이 고민하고 있는것 같아 보였음

# 목적 조직 구조 안에서 개발팀이 일하는 법 - 김경백, 신유나, 오준상, 이재석, 이동욱
- 이동욱님의 정리 및 리딩이 참 대단하다 느낌.. (질문 수준이나 정리가 대본일지 몰라도 좋았음)
- 목적 조직간의 스케줄링 방법 해결법 등이 인상 깊음, 딱히 우리 조직에 적용할 방법으로 보이지는 않아서 아쉬움 
  (ex UI 작업이 안끝나서 FE는 남은 작업이 없음에도 다음 작업을 진행하지 못함 / FE, BE Swagger 없을때는? )

# [강추] 클린 스프링 : 스프링 개발자를 위한 클린코드 전략 - 이일민 (토비)
- 클린 코드는 코드 생산성을 낮추는가? 테스트 코드를 작성하는것은 무조건 느린것인가?
- 테스트를 안만들거면 왜 스프링을 사용하는가?
- DB 테스트에는 @Transactional을 사용하자
  => 토비 : https://www.youtube.com/watch?v=-961J2c1YsM
  => 재민 : https://www.youtube.com/watch?v=mB3g3l-EQp0
  => 향로 : https://jojoldu.tistory.com/761
  => 토비 : https://tobyepril.tistory.com/m/8

# 개발자로 긴 커리어를 가지고 싶다면? - 한기용
- 기술에 집착하기 보다는 직장인으로서의 성공을 위한 방법을 공유
- 내가 원하는것이 무언인지 고민하자, 나에게 맞는 환경을 찾아가자
- 생각보다 시간은 많다

# 성장하지 않아도 괜찮습니다 - 김영재
- 저는 성장할거에요! => 성장은 먼 미래에 되돌아봤을때 평가할수있는것, 그마저도 내 입으로 차마 말할 수 없는것
- 꾸준한게 매주, 1년에 50번 반복할 뿐
- 업무 재생산 비용을 낮추고, 그 경험을 일반화하고, 그 과정에서 질문을 도구로 만들어 없앤다. 팀의 노하우가 된다. 효과 수치화를 가시화하여 조금 더 큰 규모를 본다. 이 경험을 매달 쌓으면 어느순간 모두가 나를 찾는다
- 그 분은 뭐하는 분인지 아세요? => "어.. 백엔드 엔지니어요" 보다는 " 그 분은 테스트를/설계를/UX를/문서화를/성능을 중요하게 생각하는 백엔드 엔지니어 입니다" 라고 주변에서 평가하도록 발전해보자
- 당신은 무엇에 집중하고 있는지 고민해보자

# 디버깅
- 디버깅 : 의도대로 동작하지 않는 무언가를 정상화 하는 행위
- 디버깅을 위해 몇가지 방법론은 제시하였고, 어느정도 내가 하고 있는것과 유사한것 같음
- 작업을 위한 계획 세우기 (시간 분배 등)
1. 문제 정의
- 이정표 만들기 '내가 지금 어떤 문제를 풀려고 하는거지?'
- 이게 없으면 당장 중요하지 않은 문제에 
2. 정상 동작 정의
- 심적 표상 만들기
- 올바른 동작을 정의하지 못하겠다면, 그걸 정의하기 위한 추가 정보를 여러 소스에서 수집해야함
3.최소 재현 환경 구축하며 관찰
- 직접 재현하기. '문제가 있는 부분을 어떻게 핀포인트하여 격리시킬까?'
- 격리하며 패턴 관찰
4. 차이를 발생시키는 다양한 원인 탐색 
5. 가설 설정 및 검증
- 옵션을 '검증 가능한 가설' 형태로 문장화
- 끝내 원인 파악이 안된다면, 원인 파악을 위한 추가정보를 여러 소스에서 다시 파악한다.

# 처음으로 기술 리더가 된 개발자를 위한 안내서
- 기술 리더는 왜 어려울까? 모든 것이 확실한 컴퓨터 세계 vs 모든 것이 불확실한 사람 세계
  그렇지만 팀원이 나를 좋아하고 신뢰하면 모든 것의 성공률이 높아진다.
- 팀원과 더 많은 다양한 주제로 이야기할수록 신뢰가 높아진다.

# 하루 1억건 이상을 처리하는 견고한 포인트 시스템 구축하기 - 서주은
- 견고함이란? 성능 , 데이터 정합성
- 포인트 시스템의 요구사항
  - 적립, 차감, 잔액 확인, 내역 확인
  - 다양한 포인트 타입 지원

# 기술 서적 집필은 처음이라 : 주니어 엔지니어의 기술 공유를 통한 성장 이야기 - 김가림
- 주니어 개발자분이 대단하다.
- 기술 공유를 통해 나도 성장해보면 좋을 것 같다.

# 사이드 프로젝트로 커리어 레벨업! - 조현우
- MAU 2.5만을 찍은 사이드프로젝트를 개발하면서 인프라비용에 대해 아낌없이 지불한것이 대단함
- 목표만 있으면 무조건 진행해보는게 좋은것 같음

# 혹시 당신은 데이터를 모르는 백엔드 개발자 인가요? - 김지호
- 서비스를 개발하며 테이블 설계를 진행할때 어떻게 하는게 좋을지 잘 설명해주는것 같다.
- 개발자는 Row를 DBA는 Column을 신경쓴다는게 인상깊었음
- 다만 테이블을 초기에 요구사항 대로 설계했다가, 갑자기 변경되는 경우에 어떻게 대처를하는게 좋을지가 애매했음 ㅠ

# 컴퓨터 밑바닥에서 찾는 개발자 성장의 비밀 - 유명환
- CS 공부를 다시 한번 해보는게 좋을 것 같다.
- 5가지 질문 중 애플 CPU 성능 향상 스토리가 흥미로웠고, 과거 히스토리부터 설명해주셔서 이해하기 좋았음






