# 토스 | SLASH 24 #2

# 생산성과 안정성 모두 잡는 마스터키, Canary 배포 개선기
> https://www.youtube.com/watch?v=ApNj9MZU7Ak

## 배포 전략
1. rolling update
  - 이슈 발생시 - 중단 불가
2. canary
  - 이슈 발생시 롤백 가능
- 내부서비스에는 rolling update 가 적합하나 대외서비스는 canary 배포가 적합
- 프론트
- Sticky Canary
  - 동일한 세션은 canary 배포때 동일한 서버로 요청이 가도록 고정
  - istio 기능을 이용한 sticky Canary 구현을 고려했으나, canary 배포시 비율을 수정해야하는데, 이러면 다시 세션마다 서버를 할당받아야함
  - gateway와 virtualService를 두었음
  - unique 한 헤더값 및 해시계산으로 버전을 판별하여 virtual service에서 라우팅해줌
- Auto Canary
  - 시스템도 모니터링 하도록 하자
  - vivasystem이라는 플랫폼에서 모니터링을 자동으로 하고 문제시, Auto Rollback 을 진행하도록 함


# 보상 트랜잭션으로 분산 환경에서도 안전하게 환전하기
> https://www.youtube.com/watch?v=xpwRTu47fqY

- 분산 환경이 만들어진 이유
- Corebanking (수신, 카드, 여신) -> Oracle DB, 외화계좌 -> MySQL 로 분리됨
- 분산 트랜잭션 개념에는 Two Phase Commit (2PC), Saga Pattern이 존재함
  - 2PC
    1. Voting
    2. Commit
  - Saga Pattern
    - 높은 가능성, 높은 확장성, 보상 트랜잭션 구현 필요
- SAGA
  - Message Broker 를 활용한 Choreography Saga : 느슨하게 결합됨, 상태 디버깅이 어려움
  - Orchestrator를 활용한 Orchestraion Saga : 모든 서비스게 결합되지만, 상태 디버깅이 쉬움
- Transactional Messaging
  : Local Transaction commit 과 Message 발행이 원자적으로 이루어져야함. 즉, 입금 실패로 인한 환전 실패 처리와 출금 취소 메시지 발행은 항상 같이 이루어져야 함
  => Dead Letter 발생
- Orchestrator 에서 rdb에 각 환전 요청에 대한 state 관리
- 모니터링 위해 ETL로 DB를 하나의 DB에서 관리

# 클러스터 운영부터 서비스 라이프사이클 관리까지, 데브옵스 업무 효율화
> https://www.youtube.com/watch?v=87T6d8OcvA0

- kubespray 활용하여 클러스터 구축함
- 클러스터에 노드 투입 및 버전 업그레이드가 어려움
- canary 배포 이후, 종료되지 않은 구버전 클러스터에 알람을 보냈음

# ClickHouse로 토스증권 랭킹 서비스 구조 개선하기
> https://www.youtube.com/watch?v=8P2OL7cwFEU

- 랭킹 시스템에 대한 실시간 요구 (분단위에서 초단위로 요청)
- Materialized View 활용하여 실시간으로 미리 계산된 데이터 조회하도록 함

# 토스뱅크가 차세대를 하지 않는 이유: 지속 가능한 마이그레이션 전략
> https://www.youtube.com/watch?v=LwH9h8dG3PQ

- Strangler Fig Pattern : 점진적으로 마이그레이션 함
- 연역적분석과 귀납적 분석을 통해 분석 및 설계를 진행함
- 효과적인 도메인 문서화를 반드시 진행함
- "버그가 아니라 기능입니다"
- 컴포지트 패턴을 통해 리팩토링 진행
- 콘웨이 법칙 : 시스템은 조직을 닮는다.






